#!/bin/bash

PARAMETERS="$0 $*"
CMAKEFLAGS=
SRCDIR=$(dirname $(readlink -f $0))/
CURPATH="$PWD"

function help(){
	echo ""
	echo "ESDM uses the CMake (http://www.cmake.org) buildsystem instead of configure."
	echo "CMake uses different options than configure, but you can use this script to "
	echo "specify them in the traditional way and get the equivalent cmake command."
	echo "Use the following options to change default paths."
	echo "--prefix=<dir>           : installation prefix"
	echo "--with-hdf5=<dir>        : path to the HDF5 installation directory"
	echo
	echo "Optional:"
	echo "--build-dir=<dir>        : directory in which to build"
	echo "--debug                  : build with debug flags"
	echo "--verbose                : output the command but do not execute it"
	echo "--reconfigure            : run configure again with the parameters used the last time"
	echo "--with-cc=<file>         : path to the C compiler"
	echo "--with-cxx=<file>        : path to the C++ compiler"
	echo "--with-mpicc=<file>      : path to the MPI C compiler"
	echo "--with-mpicxx=<file>     : path to the MPI C++ compiler"
	echo "--with-boost=<file>      : path to boost library used for WOS"
	echo "--enable-wos=<file>      : path to WOS library"
	echo "--enable-hdf5            : Build including HDF5 frontend"
	echo "--plantuml-jar-dir=<dir> : directory containing plantuml.jar, useful for building the documentation"
	echo
}

# Some defaults
debug=""
buildDIR="build"

function reconfigure(){
	if [[ ! -e "configure.log" ]] ; then
		echo "Error, didn't run configure before!" ;
		exit 1
	fi
	$(cat configure.log)
	exit $?
}

set -- `getopt -u -l "help,version,debug,reconfigure,prefix:,with-cc:,with-cxx:,with-hdf5:,plantuml-jar-dir:,with-mpicc:,with-mpicxx:,verbose,build-dir:,enable-wos:,with-boost:" -o "hV" -- "$@"`
test $# -lt 1  && exit 1
while test $# -gt 0
do
	case "$1" in
		--help) help; exit;;
		--reconfigure) reconfigure;;
		--version) cmake --version; exit;;
		--prefix) prefix="$2"; shift;;
		--debug) debug="YES"; ;;
		--with-cc) ccbin="$2"; shift;;
		--with-cxx) cxxbin="$2"; shift;;
		--with-hdf5) hdf5="$2"; echo "$2"; shift;;
		--with-mpicc) mpicc="$2"; shift;;
		--with-mpicxx) mpicxx="$2"; shift;;
		--with-boost) boost="$2"; shift;;
		--enable-lustre) lustre="$2"; shift;;
		--enable-clovis) clovis="$2"; shift;;
		--enable-wos) wos="$2"; shift;;
		--enable-mongodb) mongodb="$2"; shift;;
		--build-dir) buildDIR="$2"; shift;;
		--plantuml-jar-dir) export PLANTUML_JAR_PATH="$2"; shift;;
		--verbose) VERBOSE="YES";;
                -V) VERBOSE="YES";;
		--) ;;
		*) echo "Unknown option $1"; exit 1;;
	esac
	shift
done

echo $PARAMETERS > configure.log

TARGET_DIR="/usr/local"

if test -n "$debug"; then
	CMAKEFLAGS="$CMAKEFLAGS -DCMAKE_BUILD_TYPE:STRING=Debug"
else
	CMAKEFLAGS="$CMAKEFLAGS -DCMAKE_BUILD_TYPE:STRING=Release"
fi

if test -n "$prefix"; then
	CMAKEFLAGS="$CMAKEFLAGS -DCMAKE_INSTALL_PREFIX:PATH=$prefix"
	TARGET_DIR="$prefix"
fi
if test -n "$ccbin"; then
	CMAKEFLAGS="$CMAKEFLAGS -DCMAKE_C_COMPILER:FILEPATH=$ccbin"
fi
if test -n "$cxxbin"; then
	CMAKEFLAGS="$CMAKEFLAGS -DCMAKE_CXX_COMPILER:FILEPATH=$cxxbin"
fi
if test -n "$hdf5"; then
	#CMAKEFLAGS="$CMAKEFLAGS -DHDF5_HDF5_LIBRARY_RELEASE:PATH=$hdf5/lib/libhdf5.so -DHDF5_C_INCLUDE_DIR:PATH=$hdf5/include -DENABLE_HDF5=ON"
	CMAKEFLAGS="$CMAKEFLAGS -DENABLE_HDF5=ON"
fi
if test -n "$mpicc"; then
	CMAKEFLAGS="$CMAKEFLAGS -DMPI_C_COMPILER:FILEPATH=$mpicc"
fi
if test -n "$mpicxx"; then
	CMAKEFLAGS="$CMAKEFLAGS -DMPI_CXX_COMPILER:FILEPATH=$mpicxx"
fi
if test -n "$wos"; then
	CMAKEFLAGS="$CMAKEFLAGS -DWOS_wos_LIBRARY_RELEASE:PATH=$wos/lib/libwos_cpp.so -DWOS_C_INCLUDE_DIR:PATH=$wos/include"
fi
if test -n "$boost"; then
	CMAKEFLAGS="$CMAKEFLAGS -DBOOST_boost_LIBRARY_RELEASE:PATH=$boost/lib/libboost_system.so -DBOOST_C_INCLUDE_DIR:PATH=$boost/include"
fi


COMMAND="mkdir -p $buildDIR && cd $buildDIR && echo $PARAMETERS > configure.log ; rm CMakeCache.txt 2>/dev/null; cmake $CMAKEFLAGS $SRCDIR"

if [[ "$VERBOSE" == "YES" ]] ; then
	echo "Your current configure options translate to:"
	echo "$COMMAND"
	exit 0
else
	eval "$COMMAND"
	ERROR="$?"
	if [[ "$ERROR" != 0 ]] ; then
		echo "An error occurred during the configuration, aborting!"
		exit 1
	fi
fi
